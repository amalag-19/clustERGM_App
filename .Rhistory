####################################################
if(c("analyte")%in%(df_node_latlong_anpoll[which(df_node_latlong_anpoll$nodeID==polluter_node_ID),"anpoll_indicator"])){
#polluter_use_flag<-0
listID<-which(listID_nodeID_matrix[,2]==polluter_node_ID)
row_ids_date_interval<-which(between((list_analyte_time[[listID]]$date), date_start, date_end))
if(length(row_ids_date_interval)>0){
row_ids_date_interval<-which((between((list_analyte_time[[listID]]$date), date_start, date_end))&(list_analyte_time[[listID]]$date>spill_date))
if(length(row_ids_date_interval)>0){
to_obs<-c(to_obs,list_analyte_time[[listID]]$conc[row_ids_date_interval])
#polluter_use_flag<-1
}
}
}
####################################################
if(length(from_obs)==0){
from_mean<-NA
from_median<-NA
}else{
from_mean<-mean(from_obs)
from_median<-median(from_obs)
}
from_n<-length(from_obs)
####################################################
if(length(to_obs)==0){
to_mean<-NA
to_median<-NA
}else{
to_mean<-mean(to_obs)
to_median<-median(to_obs)
}
to_n<-length(to_obs)
####################################################
if((from_n>0)&(to_n>0)){
mean_diff<-to_mean-from_mean
if((from_n>1)&(to_n>1)){
p_value_t.test_1sided<-t.test(x = from_obs,y = to_obs,alternative = "less")$p.value
p_value_wilcox.test_2sided<-wilcox.test(x = from_obs,y = to_obs)$p.value
p_value_wilcox.test_1sided<-wilcox.test(x = from_obs,y = to_obs,alternative = "less")$p.value
test_pass<-1
}else{
p_value_t.test_1sided<-NA
p_value_wilcox.test_2sided<-NA
p_value_wilcox.test_1sided<-NA
test_pass<-0
}
}else{
p_value_t.test_1sided<-NA
p_value_wilcox.test_2sided<-NA
p_value_wilcox.test_1sided<-NA
test_pass<-0
}
return(list(c(from_mean,to_mean,from_median,to_median,from_n,to_n,p_value_t.test_1sided,p_value_wilcox.test_1sided,test_pass),from_obs,to_obs))
}
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Cl_spill_whole/"
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
## Loading the dataframe "df_anpoll_processed"
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
j=1
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Cl_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
j=1
## Intializing the matrix to store the polluter test results
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
polluter_test_matrix
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
df_polluter_test
debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
p_values_t_test_one_sided_starred
p_values_wilcox_test_one_sided_starred
p_values_t_test_one_sided_starred
p_values_wilcox_test_one_sided_starred
p_values_t_test_one_sided_starred
p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)]<-paste0(round(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)],2),"*")
p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)]<-paste0(round(p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)],2),"*")
p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)]<-paste0(round(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)],2),"*")
p_values_t_test_one_sided_starred
## Getting the p values for two sided and one sided tests
p_values_t_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,7]
p_values_wilcox_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,8]
p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)]<-paste0(round(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)],2),"*")
p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)]<-paste0(round(p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)],2),"*")
p_values_t_test_one_sided_starred
## Getting the p values for two sided and one sided tests
p_values_t_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,7]
p_values_wilcox_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,8]
which(p_values_t_test_one_sided_starred<=0.05)
paste0(round(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)],2),"*")
p_values_t_test_one_sided_starred
fdr_analysis_wrapper<-function(polluter_test_matrix,alpha,file_path){
####################################################
## FDR Analysis and saving the results
## Getting the row IDs in polluter_test_matrix for which we have some test results
test_pass_ids<-which(polluter_test_matrix[,9]==1)
## Loading the dataframe df_polluter_processed
load(file = paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Getting the p values for two sided and one sided tests
p_values_t_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,7]
p_values_wilcox_test_one_sided_starred<-polluter_test_matrix[test_pass_ids,8]
if(length(test_pass_ids)>=15){
## Getting the FDR decision for Wilcoxon two sided and one side tests
fdr_decision_t_test_1_sided<-fdr_decision_cal(p_val = polluter_test_matrix[test_pass_ids,7],alpha = alpha)[[1]]
fdr_decision_wilcox_test_1_sided<-fdr_decision_cal(p_val = polluter_test_matrix[test_pass_ids,8],alpha = alpha)[[1]]
## Appending the p-values with * for fdr decision one cases
p_values_t_test_one_sided_starred[which(fdr_decision_t_test_1_sided==1)]<-paste0(round(p_values_t_test_one_sided_starred[which(fdr_decision_t_test_1_sided==1)],2),"*")
p_values_wilcox_test_one_sided_starred[which(fdr_decision_wilcox_test_1_sided==1)]<-paste0(round(p_values_wilcox_test_one_sided_starred[which(fdr_decision_wilcox_test_1_sided==1)],2),"*")
p_values_t_test_one_sided_starred[which(fdr_decision_t_test_1_sided!=1)]<-round(p_values_t_test_one_sided_starred[which(fdr_decision_t_test_1_sided!=1)],2)
p_values_wilcox_test_one_sided_starred[which(fdr_decision_wilcox_test_1_sided!=1)]<-round(p_values_wilcox_test_one_sided_starred[which(fdr_decision_wilcox_test_1_sided!=1)],2)
}else{
p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred>0.05)]<-round(as.numeric(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred>0.05)]),2)
p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred>0.05)]<-round(as.numeric(p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred>0.05)]),2)
p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)]<-paste0(round(p_values_t_test_one_sided_starred[which(p_values_t_test_one_sided_starred<=0.05)],2),"*")
p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)]<-paste0(round(p_values_wilcox_test_one_sided_starred[which(p_values_wilcox_test_one_sided_starred<=0.05)],2),"*")
}
## Getting the final dataframe df polluter test
df_polluter_test<-data.frame(round(df_polluter_processed[test_pass_ids,c("lon","lat")],2),df_polluter_processed[test_pass_ids,"date"],round(polluter_test_matrix[test_pass_ids,c(1:4)],2),polluter_test_matrix[test_pass_ids,c(5,6)],p_values_t_test_one_sided_starred,p_values_wilcox_test_one_sided_starred)
names(df_polluter_test)[c(10,11)]<-c("t test (1 sided) p values","Wilcox (1 sided) p values")
return(df_polluter_test)
}
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
df_polluter_test
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
j=2
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
polluter_test_matrix
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
df_polluter_test
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Ba_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Ba_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
########################################################################################################
## Getting the final matrices and dataframes with p values
## Loading the dataframe "df_anpoll_processed"
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
## Loop to get test results for spills for downstream close and far
for (j in 1:nrow(downstream_threshold_dist_km)){
## Intializing the matrix to store the polluter test results
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
}
########################################################################################################
load(file = paste0(file_path,"inference/df_polluter_test_10.RData"))
df_polluter_test
df_polluter_test[,3]<-as.character(df_polluter_test[,3])
names(df_polluter_test)[3]<-"date"
xtable::xtable(x = df_polluter_test)
load(file = paste0(file_path,"inference/df_polluter_test_50.RData"))
df_polluter_test
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Na_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
## Loop to get test results for spills for downstream close and far
for (j in 1:nrow(downstream_threshold_dist_km)){
## Intializing the matrix to store the polluter test results
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
}
########################################################################################################
load(file = paste0(file_path,"inference/df_polluter_test_10.RData"))
df_polluter_test
df_polluter_test[,3]<-as.character(df_polluter_test[,3])
names(df_polluter_test)[3]<-"date"
xtable::xtable(x = df_polluter_test)
load(file = paste0(file_path,"inference/df_polluter_test_50.RData"))
df_polluter_test
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Mg_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
########################################################################################################
## Getting the final matrices and dataframes with p values
## Loading the dataframe "df_anpoll_processed"
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
## Loop to get test results for spills for downstream close and far
for (j in 1:nrow(downstream_threshold_dist_km)){
## Intializing the matrix to store the polluter test results
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
}
########################################################################################################
load(file = paste0(file_path,"inference/df_polluter_test_10.RData"))
df_polluter_test
df_polluter_test[,3]<-as.character(df_polluter_test[,3])
names(df_polluter_test)[3]<-"date"
xtable::xtable(x = df_polluter_test)
load(file = paste0(file_path,"inference/df_polluter_test_50.RData"))
df_polluter_test
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Sr_spill_whole/"
## Defining the file path
file_path<-"/Users/Amal/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/Sr_spill_whole/"
## Sourcing the modular functions for analysis
source(file = "~/Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/BaSu_network_v11_modular_functions.R")
########################################################################################################
## Checking df_anpoll_processed
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
str(df_anpoll_processed)
########################################################################################################
## Getting the final matrices and dataframes with p values
## Loading the dataframe "df_anpoll_processed"
load(file = paste0(file_path,"anpoll_files/df_anpoll_processed.RData"))
load(file=paste0(file_path,"polluter_files/df_polluter_processed.RData"))
## Defining the downstream_threshold_dist_km lower and upper
downstream_threshold_dist_km<-matrix(c(0,10,10,50),2,2,byrow=TRUE)
graph_subset_indicator<-F
## Loop to get test results for spills for downstream close and far
for (j in 1:nrow(downstream_threshold_dist_km)){
## Intializing the matrix to store the polluter test results
polluter_test_matrix<-data.frame(matrix(NA,nrow(df_polluter_processed),9))
upstream_downstream_obs_list<-list()
## Loop to get test results for spills in rank_subgraph
for(i in 1:nrow(polluter_test_matrix)){
if(graph_subset_indicator){
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2],date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}else{
test_result<-polluter_test_dist_time(df_polluter = df_polluter_processed, polluter_lon = df_polluter_processed$lon_mapped[i], polluter_lat = df_polluter_processed$lat_mapped[i], upstream_threshold_dist_km = 50, downstream_threshold_lower_dist_km = downstream_threshold_dist_km[j,1], downstream_threshold_upper_dist_km = downstream_threshold_dist_km[j,2], date_start=as.Date("1920-01-01"), date_end=as.Date("2017-12-31"), spill_date = df_polluter_processed$date[i], file_path = file_path)
}
print(i)
#assign("last.warning", NULL, envir = baseenv())
polluter_test_matrix[i,c(1:6)]<-test_result[[1]][c(1:6)]
if(as.numeric(test_result[[1]][9])==1){
polluter_test_matrix[i,7]<-as.numeric(test_result[[1]][7])
polluter_test_matrix[i,8]<-as.numeric(test_result[[1]][8])
}
polluter_test_matrix[i,9]<-as.numeric(test_result[[1]][9])
upstream_downstream_obs_list[[i]]<-list()
upstream_downstream_obs_list[[i]][[1]]<-test_result[[2]]
upstream_downstream_obs_list[[i]][[2]]<-test_result[[3]]
#print(i)
}
colnames(polluter_test_matrix)<-c("upstream mean","downstream mean","upstream median","downstream median","number of obs upstream","number of obs downstream", "t test (1 sided) p value", "Wilcoxon test (1 sided) p value","test result indicator")
save(polluter_test_matrix,file = paste0(file_path,"inference/polluter_test_matrix_",downstream_threshold_dist_km[j,2],".RData"))
#debug(fdr_analysis_wrapper)
df_polluter_test<-fdr_analysis_wrapper(polluter_test_matrix = polluter_test_matrix,alpha = 0.1,file_path = file_path)
save(df_polluter_test,file = paste0(file_path,"inference/df_polluter_test_",downstream_threshold_dist_km[j,2],".RData"))
}
########################################################################################################
load(file = paste0(file_path,"inference/df_polluter_test_10.RData"))
df_polluter_test
df_polluter_test[,3]<-as.character(df_polluter_test[,3])
names(df_polluter_test)[3]<-"date"
xtable::xtable(x = df_polluter_test)
load(file = paste0(file_path,"inference/df_polluter_test_50.RData"))
df_polluter_test
df_polluter_test
rownames(df_polluter_test)<-c()
df_polluter_test
print(df_polluter_test,row.names = F)
xtable::xtable(x = print(df_polluter_test,row.names = F))
xtable::xtable(x = df_polluter_test)
library(xtable)
print(xtable(x = df_polluter_test),row.names=F)
print(xtable(x = df_polluter_test),include.rownames=F)
runApp('Downloads')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/Surface Water/shinyapps/shinyapp3')
runApp('Box Sync/PSU/Spring 2018/Geoscience_Research/River network project/Analysis for Spill Paper/spillApp')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
?eventReactive
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
runApp('Box Sync/PSU/Spring 2018/Shiny Presentation')
?eventReactive
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
runApp('Box Sync/PSU/Spring 2018/Main_Research/Network Models/Apps/clustERGM')
